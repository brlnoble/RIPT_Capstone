import json
import datetime

#~~~~~~~~~~ Read in the data ~~~~~~~~~~
data = []

with open('results.json') as f:
    data = json.load(f)

#Grab the duration and remove it from the array
duration = data[0]["duration"]
data = data[1:]

#~~~~~~~~~~ Format of results #~~~~~~~~~~
metrics = {
    "hook": {
        "force": {
            "avg": 0.0,
            "quads": [0.0,0.0,0.0,0.0],
            "numPunch": [0,0,0,0]
        },
        "reaction": {
            "avg": 0.0,
            "quads": [0.0,0.0,0.0,0.0],
            "numPunch": [0,0,0,0]
        },
        "accuracy": {
            "avg": 0.0,
            "quads": [0.0,0.0,0.0,0.0],
            "numPunch": [0,0,0,0]
        },
        "form": {
            "avg": 0.0,
            "quads": [0.0,0.0,0.0,0.0],
            "numPunch": [0,0,0,0]
        },
        "numPunch": 0
    },

    "uppercut": {
        "force": {
            "avg": 0.0,
            "quads": [0.0,0.0,0.0,0.0],
            "numPunch": [0,0,0,0]
        },
        "reaction": {
            "avg": 0.0,
            "quads": [0.0,0.0,0.0,0.0],
            "numPunch": [0,0,0,0]
        },
        "accuracy": {
            "avg": 0.0,
            "quads": [0.0,0.0,0.0,0.0],
            "numPunch": [0,0,0,0]
        },
        "form": {
            "avg": 0.0,
            "quads": [0.0,0.0,0.0,0.0],
            "numPunch": [0,0,0,0]
        },
        "numPunch": 0
    },
    
    "straight": {
        "force": {
            "avg": 0.0,
            "quads": [0.0,0.0,0.0,0.0],
            "numPunch": [0,0,0,0]
        },
        "reaction": {
            "avg": 0.0,
            "quads": [0.0,0.0,0.0,0.0],
            "numPunch": [0,0,0,0]
        },
        "accuracy": {
            "avg": 0.0,
            "quads": [0.0,0.0,0.0,0.0],
            "numPunch": [0,0,0,0]
        },
        "form": {
            "avg": 0.0,
            "quads": [0.0,0.0,0.0,0.0],
            "numPunch": [0,0,0,0]
        },
        "numPunch": 0
    },
    "performance": {
        "avg": 0.0,
        "data": []
    },    
}

max_metrics = {
    "force": 0.0,
    "reaction": 0.0,
    "accuracy": 0.0,
    "form": 0.0
}
#~~~~~~~~~~ Copy data over to metrics ~~~~~~~~~~

for p in data: #for hook, straight, uppercut

    #Averages
    metrics[p["type"]]["force"]["avg"] += p["force"]
    metrics[p["type"]]["reaction"]["avg"] += p["reaction"]
    metrics[p["type"]]["accuracy"]["avg"] += p["accuracy"]

    #Quadrant specific
    metrics[p["type"]]["force"]["quads"][int(p["quad"][1])-1] += p["force"]
    metrics[p["type"]]["reaction"]["quads"][int(p["quad"][1])-1] += p["reaction"]
    metrics[p["type"]]["accuracy"]["quads"][int(p["quad"][1])-1] += p["accuracy"]

    #Count number number of punches so average can be calculated
    metrics[p["type"]]["numPunch"] += 1
    metrics[p["type"]]["force"]["numPunch"][int(p["quad"][1])-1] += 1
    metrics[p["type"]]["reaction"]["numPunch"][int(p["quad"][1])-1] += 1
    metrics[p["type"]]["accuracy"]["numPunch"][int(p["quad"][1])-1] += 1

#~~~~~~~~~~ Calculate the average of each ~~~~~~~~~~
for pType in ["hook","uppercut","straight"]:
    for avg in ["force","reaction","accuracy","form"]:

        #Overall average
        if metrics[pType]["numPunch"] > 0:
            metrics[pType][avg]["avg"] = round(metrics[pType][avg]["avg"] / metrics[pType]["numPunch"],2)

        #Update the maximum values (used later by performance)
        if metrics[pType][avg]["avg"] > max_metrics[avg]:
            max_metrics[avg] = metrics[pType][avg]["avg"]

        #Average per quadrant
        for quad in range(0,4):
            if metrics[pType][avg]["numPunch"][quad] > 0:
                metrics[pType][avg]["quads"][quad] = round(metrics[pType][avg]["quads"][quad] / metrics[pType][avg]["numPunch"][quad],2)

        #Remove the number of punches from the metrics dictionary
        del metrics[pType][avg]["numPunch"]
    
    #Remove the number of punches from the metrics dictionary
    del metrics[pType]["numPunch"]

#~~~~~~~~~~ Calculate the performance score of each punch ~~~~~~~~~~
for p in data:

    performance = 0
    consider = ["force","reaction","accuracy"] #need to incorporate form

    for val in consider:
        if max_metrics[val] > 0:
            performance += p[val] / max_metrics[val]

    #Add to the JSON
    metrics["performance"]["data"].append( round(performance / len(consider),2) )

#~~~~~~~~~~ Create the final JSON object ~~~~~~~~~~
session = {
    "id": "", #to be generated by server
    "username": "", #to be assigned by server
    "category": "Personalized", #hard coding for now as we haven't enabled other categories
    "datetime": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), #time the metrics were calculated, close enough to when the session took place
    "duration": "0 0:"+duration,
    "metrics": metrics
}

#~~~~~~~~~~ Write results to file ~~~~~~~~~~
with open("metrics.json","w") as f:
    json.dump(session, f, indent=4)